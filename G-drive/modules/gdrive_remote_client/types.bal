// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://accounts.google.com/o/oauth2/token";
|};

# Contains details about the link URLs that clients are using to refer to this item.
public type File_linkShareMetadata record {
    # Output only. Whether the file is eligible for security update.
    boolean securityUpdateEligible?;
    # Output only. Whether the security update is enabled for this file.
    boolean securityUpdateEnabled?;
};

# A list of revisions of a file.
public type RevisionList record {
    # Identifies what kind of resource this is. Value: the fixed string `"drive#revisionList"`.
    string kind?;
    # The page token for the next page of revisions. This will be absent if the end of the revisions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
    # The list of revisions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    Revision[] revisions?;
};

# Representation of label and label fields.
public type Label record {
    # A map of the fields on the label, keyed by the field's ID.
    record {|LabelField...;|} fields?;
    # The ID of the label.
    string id?;
    # This is always drive#label
    string kind?;
    # The revision ID of the label.
    string revisionId?;
};

# A list of generated file IDs which can be provided in create requests.
public type GeneratedIds record {
    # The IDs generated for the requesting user in the specified space.
    string[] ids?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#generatedIds"`.
    string kind?;
    # The type of file that can be created with these IDs.
    string space?;
};

public type About_teamDriveThemes record {
    # Deprecated: Use `driveThemes/backgroundImageLink` instead.
    string backgroundImageLink?;
    # Deprecated: Use `driveThemes/colorRgb` instead.
    string colorRgb?;
    # Deprecated: Use `driveThemes/id` instead.
    string id?;
};

# The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
public type Comment_quotedFileContent record {
    # The MIME type of the quoted content.
    string mimeType?;
    # The quoted content itself. This is interpreted as plain text if set through the API.
    string value?;
};

# A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as `permissions.update`) require a `permissionId`. Use the `permissions.list` method to retrieve the ID for a file, folder, or shared drive.
public type Permission record {
    # Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type `domain` or `anyone`.
    boolean allowFileDiscovery?;
    # Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
    boolean deleted?;
    # Output only. The "pretty" name of the value of the permission. The following is a list of examples for each type of permission: * `user` - User's full name, as defined for their Google account, such as "Joe Smith." * `group` - Name of the Google Group, such as "The Company Administrators." * `domain` - String domain name, such as "thecompany.com." * `anyone` - No `displayName` is present.
    string displayName?;
    # The domain to which this permission refers.
    string domain?;
    # The email address of the user or group to which this permission refers.
    string emailAddress?;
    # The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions: - They can only be set on user and group permissions - The time must be in the future - The time cannot be more than a year in the future
    string expirationTime?;
    # Output only. The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as `permissionId`. IDs should be treated as opaque values.
    string id?;
    # Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#permission"`.
    string kind?;
    # Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.
    boolean pendingOwner?;
    # Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.
    Permission_permissionDetails[] permissionDetails?;
    # Output only. A link to the user's profile photo, if available.
    string photoLink?;
    # The role granted by this permission. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `commenter` * `reader`
    string role?;
    # Output only. Deprecated: Output only. Use `permissionDetails` instead.
    Permission_teamDrivePermissionDetails[] teamDrivePermissionDetails?;
    # The type of the grantee. Valid values are: * `user` * `group` * `domain` * `anyone` When creating a permission, if `type` is `user` or `group`, you must provide an `emailAddress` for the user or group. When `type` is `domain`, you must provide a `domain`. There isn't extra information required for an `anyone` type.
    string 'type?;
    # Indicates the view for this permission. Only populated for permissions that belong to a view. 'published' is the only supported value.
    string view?;
};

# Representation of a shared drive. Some resource methods (such as `drives.update`) require a `driveId`. Use the `drives.list` method to retrieve the ID for a shared drive.
public type Drive record {
    # An image file and cropping parameters from which a background image for this shared drive is set. This is a write only field; it can only be set on `drive.drives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
    Drive_backgroundImageFile backgroundImageFile?;
    # Output only. A short-lived link to this shared drive's background image.
    string backgroundImageLink?;
    # Output only. Capabilities the current user has on this shared drive.
    Drive_capabilities capabilities?;
    # The color of this shared drive as an RGB hex string. It can only be set on a `drive.drives.update` request that does not set `themeId`.
    string colorRgb?;
    # The time at which the shared drive was created (RFC 3339 date-time).
    string createdTime?;
    # Whether the shared drive is hidden from default view.
    boolean hidden?;
    # Output only. The ID of this shared drive which is also the ID of the top level folder of this shared drive.
    string id?;
    # Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#drive"`.
    string kind?;
    # The name of this shared drive.
    string name?;
    # Output only. The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.
    string orgUnitId?;
    # A set of restrictions that apply to this shared drive or items inside this shared drive.
    Drive_restrictions restrictions?;
    # The ID of the theme from which the background image and color will be set. The set of possible `driveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.drives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.
    string themeId?;
};

# A list of replies to a comment on a file.
public type ReplyList record {
    # Identifies what kind of resource this is. Value: the fixed string `"drive#replyList"`.
    string kind?;
    # The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
    # The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    Reply[] replies?;
};

# Representation of field, which is a typed key-value pair.
public type LabelField record {
    # Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.
    string[] dateString?;
    # The identifier of this label field.
    string id?;
    # Only present if `valueType` is `integer`.
    string[] integer?;
    # This is always drive#labelField.
    string kind?;
    # Only present if `valueType` is `selection`
    string[] selection?;
    # Only present if `valueType` is `text`.
    string[] text?;
    # Only present if `valueType` is `user`.
    User[] user?;
    # The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user`
    string valueType?;
};

public type About_driveThemes record {
    # A link to this theme's background image.
    string backgroundImageLink?;
    # The color of this theme as an RGB hex string.
    string colorRgb?;
    # The ID of the theme.
    string id?;
};

public type Permission_teamDrivePermissionDetails record {
    # Deprecated: Output only. Use `permissionDetails/inherited` instead.
    boolean inherited?;
    # Deprecated: Output only. Use `permissionDetails/inheritedFrom` instead.
    string inheritedFrom?;
    # Deprecated: Output only. Use `permissionDetails/role` instead.
    string role?;
    # Deprecated: Output only. Use `permissionDetails/permissionType` instead.
    string teamDrivePermissionType?;
};

# An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on `drive.teamdrives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
public type TeamDrive_backgroundImageFile record {
    # The ID of an image file in Drive to use for the background image.
    string id?;
    # The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
    float width?;
    # The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
    float xCoordinate?;
    # The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
    float yCoordinate?;
};

# A list of files.
public type FileList record {
    # The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    File[] files?;
    # Whether the search process was incomplete. If true, then some search results might be missing, since all documents were not searched. This can occur when searching multiple drives with the 'allDrives' corpora, but all corpora couldn't be searched. When this happens, it's suggested that clients narrow their query by choosing a different corpus such as 'user' or 'drive'.
    boolean incompleteSearch?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#fileList"`.
    string kind?;
    # The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
};

# A list of permissions for a file.
public type PermissionList record {
    # Identifies what kind of resource this is. Value: the fixed string `"drive#permissionList"`.
    string kind?;
    # The page token for the next page of permissions. This field will be absent if the end of the permissions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
    # The list of permissions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    Permission[] permissions?;
};

# A notification channel used to watch for resource changes.
public type Channel record {
    # The address where notifications are delivered for this channel.
    string address?;
    # Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
    string expiration?;
    # A UUID or similar unique string that identifies this channel.
    string id?;
    # Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.
    string kind?;
    # Additional parameters controlling delivery channel behavior. Optional.
    record {|string...;|} params?;
    # A Boolean value to indicate whether payload is wanted. Optional.
    boolean payload?;
    # An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
    string resourceId?;
    # A version-specific identifier for the watched resource.
    string resourceUri?;
    # An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
    string token?;
    # The type of delivery mechanism used for this channel.
    string 'type?;
};

# A list of labels applied to a file.
public type LabelList record {
    # This is always drive#labelList
    string kind?;
    # The list of labels.
    Label[] labels?;
    # The page token for the next page of labels. This field will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
};

# A restriction for accessing the content of the file.
public type ContentRestriction record {
    # Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with `organizer` capabilities can modify or remove this content restriction.
    boolean ownerRestricted?;
    # Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.
    boolean readOnly?;
    # Reason for why the content of the file is restricted. This is only mutable on requests that also set `readOnly=true`.
    string reason?;
    # Information about a Drive user.
    User restrictingUser?;
    # The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.
    string restrictionTime?;
    # Output only. The type of the content restriction. Currently the only possible value is `globalContentRestriction`.
    string 'type?;
};

# Shortcut file details. Only populated for shortcut files, which have the mimeType field set to `application/vnd.google-apps.shortcut`.
public type File_shortcutDetails record {
    # The ID of the file that this shortcut points to.
    string targetId?;
    # Output only. The MIME type of the file that this shortcut points to. The value of this field is a snapshot of the target's MIME type, captured when the shortcut is created.
    string targetMimeType?;
    # Output only. The ResourceKey for the target file.
    string targetResourceKey?;
};

# Information about the user, the user's Drive, and system capabilities.
public type About record {
    # Whether the user has installed the requesting app.
    boolean appInstalled?;
    # Whether the user can create shared drives.
    boolean canCreateDrives?;
    # Deprecated: Use `canCreateDrives` instead.
    boolean canCreateTeamDrives?;
    # A list of themes that are supported for shared drives.
    About_driveThemes[] driveThemes?;
    # A map of source MIME type to possible targets for all supported exports.
    record {|string[]...;|} exportFormats?;
    # The currently supported folder colors as RGB hex strings.
    string[] folderColorPalette?;
    # A map of source MIME type to possible targets for all supported imports.
    record {|string[]...;|} importFormats?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#about"`.
    string kind?;
    # A map of maximum import sizes by MIME type, in bytes.
    record {|string...;|} maxImportSizes?;
    # The maximum upload size in bytes.
    string maxUploadSize?;
    # The user's storage quota limits and usage. All fields are measured in bytes.
    About_storageQuota storageQuota?;
    # Deprecated: Use `driveThemes` instead.
    About_teamDriveThemes[] teamDriveThemes?;
    # Information about a Drive user.
    User user?;
};

public type StartPageToken record {
    # Identifies what kind of resource this is. Value: the fixed string `"drive#startPageToken"`.
    string kind?;
    # The starting page token for listing future changes. The page token doesn't expire.
    string startPageToken?;
};

# An image file and cropping parameters from which a background image for this shared drive is set. This is a write only field; it can only be set on `drive.drives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
public type Drive_backgroundImageFile record {
    # The ID of an image file in Google Drive to use for the background image.
    string id?;
    # The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
    float width?;
    # The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
    float xCoordinate?;
    # The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
    float yCoordinate?;
};

# The metadata for a revision to a file. Some resource methods (such as `revisions.update`) require a `revisionId`. Use the `revisions.list` method to retrieve the ID for a revision.
public type Revision record {
    # Output only. Links for exporting Docs Editors files to specific formats.
    record {|string...;|} exportLinks?;
    # Output only. The ID of the revision.
    string id?;
    # Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.
    boolean keepForever?;
    # Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#revision"`.
    string kind?;
    # Information about a Drive user.
    User lastModifyingUser?;
    # Output only. The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive.
    string md5Checksum?;
    # Output only. The MIME type of the revision.
    string mimeType?;
    # The last time the revision was modified (RFC 3339 date-time).
    string modifiedTime?;
    # Output only. The original filename used to create this revision. This is only applicable to files with binary content in Drive.
    string originalFilename?;
    # Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.
    boolean publishAuto?;
    # Whether this revision is published. This is only applicable to Docs Editors files.
    boolean published?;
    # Output only. A link to the published revision. This is only populated for Google Sites files.
    string publishedLink?;
    # Whether this revision is published outside the domain. This is only applicable to Docs Editors files.
    boolean publishedOutsideDomain?;
    # Output only. The size of the revision's content in bytes. This is only applicable to files with binary content in Drive.
    string size?;
};

# A list of changes for a user.
public type ChangeList record {
    # The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    Change[] changes?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#changeList"`.
    string kind?;
    # The starting page token for future changes. This will be present only if the end of the current changes list has been reached. The page token doesn't expire.
    string newStartPageToken?;
    # The page token for the next page of changes. This will be absent if the end of the changes list has been reached. The page token doesn't expire.
    string nextPageToken?;
};

# Output only. Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
public type File_capabilities record {
    # Output only. Whether the current user is the pending owner of the file. Not populated for shared drive files.
    boolean canAcceptOwnership?;
    # Output only. Whether the current user can add children to this folder. This is always false when the item is not a folder.
    boolean canAddChildren?;
    # Output only. Whether the current user can add a folder from another drive (different shared drive or My Drive) to this folder. This is false when the item is not a folder. Only populated for items in shared drives.
    boolean canAddFolderFromAnotherDrive?;
    # Output only. Whether the current user can add a parent for the item without removing an existing parent in the same request. Not populated for shared drive files.
    boolean canAddMyDriveParent?;
    # Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this file.
    boolean canChangeCopyRequiresWriterPermission?;
    # Output only. Whether the current user can change the securityUpdateEnabled field on link share metadata.
    boolean canChangeSecurityUpdateEnabled?;
    # Deprecated: Output only.
    boolean canChangeViewersCanCopyContent?;
    # Output only. Whether the current user can comment on this file.
    boolean canComment?;
    # Output only. Whether the current user can copy this file. For an item in a shared drive, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder.
    boolean canCopy?;
    # Output only. Whether the current user can delete this file.
    boolean canDelete?;
    # Output only. Whether the current user can delete children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
    boolean canDeleteChildren?;
    # Output only. Whether the current user can download this file.
    boolean canDownload?;
    # Output only. Whether the current user can edit this file. Other factors may limit the type of changes a user can make to a file. For example, see `canChangeCopyRequiresWriterPermission` or `canModifyContent`.
    boolean canEdit?;
    # Output only. Whether the current user can list the children of this folder. This is always false when the item is not a folder.
    boolean canListChildren?;
    # Output only. Whether the current user can modify the content of this file.
    boolean canModifyContent?;
    # Deprecated: Output only. Use one of `canModifyEditorContentRestriction`, `canModifyOwnerContentRestriction` or `canRemoveContentRestriction`.
    boolean canModifyContentRestriction?;
    # Output only. Whether the current user can add or modify content restrictions on the file which are editor restricted.
    boolean canModifyEditorContentRestriction?;
    # Output only. Whether the current user can modify the labels on the file.
    boolean canModifyLabels?;
    # Output only. Whether the current user can add or modify content restrictions which are owner restricted.
    boolean canModifyOwnerContentRestriction?;
    # Output only. Whether the current user can move children of this folder outside of the shared drive. This is false when the item is not a folder. Only populated for items in shared drives.
    boolean canMoveChildrenOutOfDrive?;
    # Deprecated: Output only. Use `canMoveChildrenOutOfDrive` instead.
    boolean canMoveChildrenOutOfTeamDrive?;
    # Output only. Whether the current user can move children of this folder within this drive. This is false when the item is not a folder. Note that a request to move the child may still fail depending on the current user's access to the child and to the destination folder.
    boolean canMoveChildrenWithinDrive?;
    # Deprecated: Output only. Use `canMoveChildrenWithinDrive` instead.
    boolean canMoveChildrenWithinTeamDrive?;
    # Deprecated: Output only. Use `canMoveItemOutOfDrive` instead.
    boolean canMoveItemIntoTeamDrive?;
    # Output only. Whether the current user can move this item outside of this drive by changing its parent. Note that a request to change the parent of the item may still fail depending on the new parent that is being added.
    boolean canMoveItemOutOfDrive?;
    # Deprecated: Output only. Use `canMoveItemOutOfDrive` instead.
    boolean canMoveItemOutOfTeamDrive?;
    # Output only. Whether the current user can move this item within this drive. Note that a request to change the parent of the item may still fail depending on the new parent that is being added and the parent that is being removed.
    boolean canMoveItemWithinDrive?;
    # Deprecated: Output only. Use `canMoveItemWithinDrive` instead.
    boolean canMoveItemWithinTeamDrive?;
    # Deprecated: Output only. Use `canMoveItemWithinDrive` or `canMoveItemOutOfDrive` instead.
    boolean canMoveTeamDriveItem?;
    # Output only. Whether the current user can read the shared drive to which this file belongs. Only populated for items in shared drives.
    boolean canReadDrive?;
    # Output only. Whether the current user can read the labels on the file.
    boolean canReadLabels?;
    # Output only. Whether the current user can read the revisions resource of this file. For a shared drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read.
    boolean canReadRevisions?;
    # Deprecated: Output only. Use `canReadDrive` instead.
    boolean canReadTeamDrive?;
    # Output only. Whether the current user can remove children from this folder. This is always false when the item is not a folder. For a folder in a shared drive, use `canDeleteChildren` or `canTrashChildren` instead.
    boolean canRemoveChildren?;
    # Output only. Whether there is a content restriction on the file that can be removed by the current user.
    boolean canRemoveContentRestriction?;
    # Output only. Whether the current user can remove a parent from the item without adding another parent in the same request. Not populated for shared drive files.
    boolean canRemoveMyDriveParent?;
    # Output only. Whether the current user can rename this file.
    boolean canRename?;
    # Output only. Whether the current user can modify the sharing settings for this file.
    boolean canShare?;
    # Output only. Whether the current user can move this file to trash.
    boolean canTrash?;
    # Output only. Whether the current user can trash children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
    boolean canTrashChildren?;
    # Output only. Whether the current user can restore this file from trash.
    boolean canUntrash?;
};

# A modification to a label's field.
public type LabelFieldModification record {
    # The ID of the field to be modified.
    string fieldId?;
    # This is always drive#labelFieldModification.
    string kind?;
    # Replaces the value of a dateString Field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.
    string[] setDateValues?;
    # Replaces the value of an `integer` field with these new values.
    string[] setIntegerValues?;
    # Replaces a `selection` field with these new values.
    string[] setSelectionValues?;
    # Sets the value of a `text` field.
    string[] setTextValues?;
    # Replaces a `user` field with these new values. The values must be valid email addresses.
    string[] setUserValues?;
    # Unsets the values for this field.
    boolean unsetValues?;
};

# A list of Team Drives.
public type TeamDriveList record {
    # Identifies what kind of resource this is. Value: the fixed string `"drive#teamDriveList"`.
    string kind?;
    # The page token for the next page of Team Drives. This will be absent if the end of the Team Drives list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
    # The list of Team Drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    TeamDrive[] teamDrives?;
};

# A list of comments on a file.
public type CommentList record {
    # The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    Comment[] comments?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#commentList"`.
    string kind?;
    # The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
};

# Output only. Capabilities the current user has on this shared drive.
public type Drive_capabilities record {
    # Output only. Whether the current user can add children to folders in this shared drive.
    boolean canAddChildren?;
    # Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this shared drive.
    boolean canChangeCopyRequiresWriterPermissionRestriction?;
    # Output only. Whether the current user can change the `domainUsersOnly` restriction of this shared drive.
    boolean canChangeDomainUsersOnlyRestriction?;
    # Output only. Whether the current user can change the background of this shared drive.
    boolean canChangeDriveBackground?;
    # Output only. Whether the current user can change the `driveMembersOnly` restriction of this shared drive.
    boolean canChangeDriveMembersOnlyRestriction?;
    # Output only. Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this shared drive.
    boolean canChangeSharingFoldersRequiresOrganizerPermissionRestriction?;
    # Output only. Whether the current user can comment on files in this shared drive.
    boolean canComment?;
    # Output only. Whether the current user can copy files in this shared drive.
    boolean canCopy?;
    # Output only. Whether the current user can delete children from folders in this shared drive.
    boolean canDeleteChildren?;
    # Output only. Whether the current user can delete this shared drive. Attempting to delete the shared drive may still fail if there are untrashed items inside the shared drive.
    boolean canDeleteDrive?;
    # Output only. Whether the current user can download files in this shared drive.
    boolean canDownload?;
    # Output only. Whether the current user can edit files in this shared drive
    boolean canEdit?;
    # Output only. Whether the current user can list the children of folders in this shared drive.
    boolean canListChildren?;
    # Output only. Whether the current user can add members to this shared drive or remove them or change their role.
    boolean canManageMembers?;
    # Output only. Whether the current user can read the revisions resource of files in this shared drive.
    boolean canReadRevisions?;
    # Output only. Whether the current user can rename files or folders in this shared drive.
    boolean canRename?;
    # Output only. Whether the current user can rename this shared drive.
    boolean canRenameDrive?;
    # Output only. Whether the current user can reset the shared drive restrictions to defaults.
    boolean canResetDriveRestrictions?;
    # Output only. Whether the current user can share files or folders in this shared drive.
    boolean canShare?;
    # Output only. Whether the current user can trash children from folders in this shared drive.
    boolean canTrashChildren?;
};

# A set of restrictions that apply to this Team Drive or items inside this Team Drive.
public type TeamDrive_restrictions record {
    # Whether administrative privileges on this Team Drive are required to modify restrictions.
    boolean adminManagedRestrictions?;
    # Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this Team Drive.
    boolean copyRequiresWriterPermission?;
    # Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive.
    boolean domainUsersOnly?;
    # If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.
    boolean sharingFoldersRequiresOrganizerPermission?;
    # Whether access to items inside this Team Drive is restricted to members of this Team Drive.
    boolean teamMembersOnly?;
};

# The metadata for a file. Some resource methods (such as `files.update`) require a `fileId`. Use the `files.list` method to retrieve the ID for a file.
public type File record {
    # A collection of arbitrary key-value pairs which are private to the requesting app.
    # Entries with null values are cleared in update and copy requests. These properties can only be retrieved using an authenticated request. An authenticated request uses an access token obtained with a OAuth 2 client ID. You cannot use an API key to retrieve private properties.
    record {|string...;|} appProperties?;
    # Output only. Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
    File_capabilities capabilities?;
    # Additional information about the content of the file. These fields are never populated in responses.
    File_contentHints contentHints?;
    # Restrictions for accessing the content of the file. Only populated if such a restriction exists.
    ContentRestriction[] contentRestrictions?;
    # Whether the options to copy, print, or download this file, should be disabled for readers and commenters.
    boolean copyRequiresWriterPermission?;
    # The time at which the file was created (RFC 3339 date-time).
    string createdTime?;
    # A short description of the file.
    string description?;
    # Output only. ID of the shared drive the file resides in. Only populated for items in shared drives.
    string driveId?;
    # Output only. Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder.
    boolean explicitlyTrashed?;
    # Output only. Links for exporting Docs Editors files to specific formats.
    record {|string...;|} exportLinks?;
    # Output only. The final component of `fullFileExtension`. This is only available for files with binary content in Google Drive.
    string fileExtension?;
    # The color for a folder or a shortcut to a folder as an RGB hex string. The supported colors are published in the `folderColorPalette` field of the About resource. If an unsupported color is specified, the closest color in the palette is used instead.
    string folderColorRgb?;
    # Output only. The full file extension extracted from the `name` field. May contain multiple concatenated extensions, such as "tar.gz". This is only available for files with binary content in Google Drive. This is automatically updated when the `name` field changes, however it is not cleared if the new name does not contain a valid extension.
    string fullFileExtension?;
    # Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives.
    boolean hasAugmentedPermissions?;
    # Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.
    boolean hasThumbnail?;
    # Output only. The ID of the file's head revision. This is currently only available for files with binary content in Google Drive.
    string headRevisionId?;
    # Output only. A static, unauthenticated link to the file's icon.
    string iconLink?;
    # The ID of the file.
    string id?;
    # Output only. Additional metadata about image media, if available.
    File_imageMediaMetadata imageMediaMetadata?;
    # Output only. Whether the file was created or opened by the requesting app.
    boolean isAppAuthorized?;
    # Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#file"`.
    string kind?;
    # Output only. An overview of the labels on the file.
    File_labelInfo labelInfo?;
    # Information about a Drive user.
    User lastModifyingUser?;
    # Contains details about the link URLs that clients are using to refer to this item.
    File_linkShareMetadata linkShareMetadata?;
    # Output only. The MD5 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.
    string md5Checksum?;
    # The MIME type of the file. Google Drive attempts to automatically detect an appropriate value from uploaded content, if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content is imported, if possible. The supported import formats are published in the About resource.
    string mimeType?;
    # Output only. Whether the file has been modified by this user.
    boolean modifiedByMe?;
    # The last time the file was modified by the user (RFC 3339 date-time).
    string modifiedByMeTime?;
    # he last time the file was modified by anyone (RFC 3339 date-time). Note that setting modifiedTime will also update modifiedByMeTime for the user.
    string modifiedTime?;
    # The name of the file. This is not necessarily unique within a folder. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the name is constant.
    string name?;
    # The original filename of the uploaded content if available, or else the original value of the `name` field. This is only available for files with binary content in Google Drive.
    string originalFilename?;
    # Output only. Whether the user owns the file. Not populated for items in shared drives.
    boolean ownedByMe?;
    # Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.
    User[] owners?;
    # The IDs of the parent folders which contain the file. If not specified as part of a create request, the file is placed directly in the user's My Drive folder. If not specified as part of a copy request, the file inherits any discoverable parents of the source file. Update requests must use the `addParents` and `removeParents` parameters to modify the parents list.
    string[] parents?;
    # Output only. List of permission IDs for users with access to this file.
    string[] permissionIds?;
    # Output only. The full list of permissions for the file. This is only available if the requesting user can share the file. Not populated for items in shared drives.
    Permission[] permissions?;
    # A collection of arbitrary key-value pairs which are visible to all apps.
    # Entries with null values are cleared in update and copy requests.
    record {|string...;|} properties?;
    # Output only. The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions with `keepForever` enabled.
    string quotaBytesUsed?;
    # Output only. A key needed to access the item via a shared link.
    string resourceKey?;
    # Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
    string sha1Checksum?;
    # Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
    string sha256Checksum?;
    # Output only. Whether the file has been shared. Not populated for items in shared drives.
    boolean shared?;
    # The time at which the file was shared with the user, if applicable (RFC 3339 date-time).
    string sharedWithMeTime?;
    # Information about a Drive user.
    User sharingUser?;
    # Shortcut file details. Only populated for shortcut files, which have the mimeType field set to `application/vnd.google-apps.shortcut`.
    File_shortcutDetails shortcutDetails?;
    # Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders.
    string size?;
    # Output only. The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.
    string[] spaces?;
    # Whether the user has starred the file.
    boolean starred?;
    # Deprecated: Output only. Use `driveId` instead.
    string teamDriveId?;
    # Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request.
    string thumbnailLink?;
    # Output only. The thumbnail version for use in thumbnail cache invalidation.
    string thumbnailVersion?;
    # Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the owner may trash a file, and other users cannot see files in the owner's trash.
    boolean trashed?;
    # The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared drives.
    string trashedTime?;
    # Information about a Drive user.
    User trashingUser?;
    # Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.
    string version?;
    # Output only. Additional metadata about video media. This may not be available immediately upon upload.
    File_videoMediaMetadata videoMediaMetadata?;
    # Output only. Whether the file has been viewed by this user.
    boolean viewedByMe?;
    # The last time the file was viewed by the user (RFC 3339 date-time).
    string viewedByMeTime?;
    # Deprecated: Use `copyRequiresWriterPermission` instead.
    boolean viewersCanCopyContent?;
    # Output only. A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.
    string webContentLink?;
    # Output only. A link for opening the file in a relevant Google editor or viewer in a browser.
    string webViewLink?;
    # Whether users with only `writer` permission can modify the file's permissions. Not populated for items in shared drives.
    boolean writersCanShare?;
};

# Output only. Additional metadata about image media, if available.
public type File_imageMediaMetadata record {
    # Output only. The aperture used to create the photo (f-number).
    float aperture?;
    # Output only. The make of the camera used to create the photo.
    string cameraMake?;
    # Output only. The model of the camera used to create the photo.
    string cameraModel?;
    # Output only. The color space of the photo.
    string colorSpace?;
    # Output only. The exposure bias of the photo (APEX value).
    float exposureBias?;
    # Output only. The exposure mode used to create the photo.
    string exposureMode?;
    # Output only. The length of the exposure, in seconds.
    float exposureTime?;
    # Output only. Whether a flash was used to create the photo.
    boolean flashUsed?;
    # Output only. The focal length used to create the photo, in millimeters.
    float focalLength?;
    # Output only. The height of the image in pixels.
    int:Signed32 height?;
    # Output only. The ISO speed used to create the photo.
    int:Signed32 isoSpeed?;
    # Output only. The lens used to create the photo.
    string lens?;
    # Output only. Geographic location information stored in the image.
    File_imageMediaMetadata_location location?;
    # Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value).
    float maxApertureValue?;
    # Output only. The metering mode used to create the photo.
    string meteringMode?;
    # Output only. The number of clockwise 90 degree rotations applied from the image's original orientation.
    int:Signed32 rotation?;
    # Output only. The type of sensor used to create the photo.
    string sensor?;
    # Output only. The distance to the subject of the photo, in meters.
    int:Signed32 subjectDistance?;
    # Output only. The date and time the photo was taken (EXIF DateTime).
    string time?;
    # Output only. The white balance mode used to create the photo.
    string whiteBalance?;
    # Output only. The width of the image in pixels.
    int:Signed32 width?;
};

# The user's storage quota limits and usage. All fields are measured in bytes.
public type About_storageQuota record {
    # The usage limit, if applicable. This will not be present if the user has unlimited storage.
    string 'limit?;
    # The total usage across all services.
    string usage?;
    # The usage by all files in Google Drive.
    string usageInDrive?;
    # The usage by trashed files in Google Drive.
    string usageInDriveTrash?;
};

# Capabilities the current user has on this Team Drive.
public type TeamDrive_capabilities record {
    # Whether the current user can add children to folders in this Team Drive.
    boolean canAddChildren?;
    # Whether the current user can change the `copyRequiresWriterPermission` restriction of this Team Drive.
    boolean canChangeCopyRequiresWriterPermissionRestriction?;
    # Whether the current user can change the `domainUsersOnly` restriction of this Team Drive.
    boolean canChangeDomainUsersOnlyRestriction?;
    # Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this Team Drive.
    boolean canChangeSharingFoldersRequiresOrganizerPermissionRestriction?;
    # Whether the current user can change the background of this Team Drive.
    boolean canChangeTeamDriveBackground?;
    # Whether the current user can change the `teamMembersOnly` restriction of this Team Drive.
    boolean canChangeTeamMembersOnlyRestriction?;
    # Whether the current user can comment on files in this Team Drive.
    boolean canComment?;
    # Whether the current user can copy files in this Team Drive.
    boolean canCopy?;
    # Whether the current user can delete children from folders in this Team Drive.
    boolean canDeleteChildren?;
    # Whether the current user can delete this Team Drive. Attempting to delete the Team Drive may still fail if there are untrashed items inside the Team Drive.
    boolean canDeleteTeamDrive?;
    # Whether the current user can download files in this Team Drive.
    boolean canDownload?;
    # Whether the current user can edit files in this Team Drive
    boolean canEdit?;
    # Whether the current user can list the children of folders in this Team Drive.
    boolean canListChildren?;
    # Whether the current user can add members to this Team Drive or remove them or change their role.
    boolean canManageMembers?;
    # Whether the current user can read the revisions resource of files in this Team Drive.
    boolean canReadRevisions?;
    # Deprecated: Use `canDeleteChildren` or `canTrashChildren` instead.
    boolean canRemoveChildren?;
    # Whether the current user can rename files or folders in this Team Drive.
    boolean canRename?;
    # Whether the current user can rename this Team Drive.
    boolean canRenameTeamDrive?;
    # Whether the current user can reset the Team Drive restrictions to defaults.
    boolean canResetTeamDriveRestrictions?;
    # Whether the current user can share files or folders in this Team Drive.
    boolean canShare?;
    # Whether the current user can trash children from folders in this Team Drive.
    boolean canTrashChildren?;
};

# Information about a Drive user.
public type User record {
    # Output only. A plain text displayable name for this user.
    string displayName?;
    # Output only. The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.
    string emailAddress?;
    # Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#user"`.
    string kind?;
    # Output only. Whether this user is the requesting user.
    boolean me?;
    # Output only. The user's ID as visible in Permission resources.
    string permissionId?;
    # Output only. A link to the user's profile photo, if available.
    string photoLink?;
};

# Output only. An overview of the labels on the file.
public type File_labelInfo record {
    # Output only. The set of labels on the file as requested by the label IDs in the `includeLabels` parameter. By default, no labels are returned.
    Label[] labels?;
};

# Output only. Geographic location information stored in the image.
public type File_imageMediaMetadata_location record {
    # Output only. The altitude stored in the image.
    decimal altitude?;
    # Output only. The latitude stored in the image.
    decimal latitude?;
    # Output only. The longitude stored in the image.
    decimal longitude?;
};

# Response to a ModifyLabels request. This contains only those labels which were added or updated by the request.
public type ModifyLabelsResponse record {
    # This is always drive#modifyLabelsResponse
    string kind?;
    # The list of labels which were added or updated by the request.
    Label[] modifiedLabels?;
};

# Additional information about the content of the file. These fields are never populated in responses.
public type File_contentHints record {
    # Text to be indexed for the file to improve fullText queries. This is limited to 128KB in length and may contain HTML elements.
    string indexableText?;
    # A thumbnail for the file. This will only be used if Google Drive cannot generate a standard thumbnail.
    File_contentHints_thumbnail thumbnail?;
};

# A set of restrictions that apply to this shared drive or items inside this shared drive.
public type Drive_restrictions record {
    # Whether administrative privileges on this shared drive are required to modify restrictions.
    boolean adminManagedRestrictions?;
    # Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this shared drive.
    boolean copyRequiresWriterPermission?;
    # Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of this shared drive.
    boolean domainUsersOnly?;
    # Whether access to items inside this shared drive is restricted to its members.
    boolean driveMembersOnly?;
    # If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.
    boolean sharingFoldersRequiresOrganizerPermission?;
};

# A list of shared drives.
public type DriveList record {
    # The list of shared drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    Drive[] drives?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#driveList"`.
    string kind?;
    # The page token for the next page of shared drives. This will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
    string nextPageToken?;
};

# A comment on a file. Some resource methods (such as `comments.update`) require a `commentId`. Use the `comments.list` method to retrieve the ID for a comment in a file.
public type Comment record {
    # A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Manage comments and replies](https://developers.google.com/drive/api/v3/manage-comments).
    string anchor?;
    # Information about a Drive user.
    User author?;
    # The plain text content of the comment. This field is used for setting the content, while `htmlContent` should be displayed.
    string content?;
    # The time at which the comment was created (RFC 3339 date-time).
    string createdTime?;
    # Output only. Whether the comment has been deleted. A deleted comment has no content.
    boolean deleted?;
    # Output only. The content of the comment with HTML formatting.
    string htmlContent?;
    # Output only. The ID of the comment.
    string id?;
    # Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#comment"`.
    string kind?;
    # The last time the comment or any of its replies was modified (RFC 3339 date-time).
    string modifiedTime?;
    # The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
    Comment_quotedFileContent quotedFileContent?;
    # Output only. The full list of replies to the comment in chronological order.
    Reply[] replies?;
    # Output only. Whether the comment has been resolved by one of its replies.
    boolean resolved?;
};

# A modification to a label on a file. A LabelModification can be used to apply a label to a file, update an existing label on a file, or remove a label from a file.
public type LabelModification record {
    # The list of modifications to this label's fields.
    LabelFieldModification[] fieldModifications?;
    # This is always drive#labelModification.
    string kind?;
    # The ID of the label to modify.
    string labelId?;
    # If true, the label will be removed from the file.
    boolean removeLabel?;
};

# A thumbnail for the file. This will only be used if Google Drive cannot generate a standard thumbnail.
public type File_contentHints_thumbnail record {
    # The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).
    byte[] image?;
    # The MIME type of the thumbnail.
    string mimeType?;
};

# A change to a file or shared drive.
public type Change record {
    # The type of the change. Possible values are `file` and `drive`.
    string changeType?;
    # Representation of a shared drive. Some resource methods (such as `drives.update`) require a `driveId`. Use the `drives.list` method to retrieve the ID for a shared drive.
    Drive drive?;
    # The ID of the shared drive associated with this change.
    string driveId?;
    # The metadata for a file. Some resource methods (such as `files.update`) require a `fileId`. Use the `files.list` method to retrieve the ID for a file.
    File file?;
    # The ID of the file which has changed.
    string fileId?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#change"`.
    string kind?;
    # Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.
    boolean removed?;
    # Deprecated: use the drive collection instead.
    TeamDrive teamDrive?;
    # Deprecated: Use `driveId` instead.
    string teamDriveId?;
    # The time of this change (RFC 3339 date-time).
    string time?;
    # Deprecated: Use `changeType` instead.
    string 'type?;
};

# A request to modify the set of labels on a file. This request may contain many modifications that will either all succeed or all fail atomically.
public type ModifyLabelsRequest record {
    # This is always drive#modifyLabelsRequest.
    string kind?;
    # The list of modifications to apply to the labels on the file.
    LabelModification[] labelModifications?;
};

public type Permission_permissionDetails record {
    # Output only. Whether this permission is inherited. This field is always populated. This is an output-only field.
    boolean inherited?;
    # Output only. The ID of the item from which this permission is inherited. This is an output-only field.
    string inheritedFrom?;
    # Output only. The permission type for this user. While new values may be added in future, the following are currently possible: * `file` * `member`
    string permissionType?;
    # Output only. The primary role for this user. While new values may be added in the future, the following are currently possible: * `organizer` * `fileOrganizer` * `writer` * `commenter` * `reader`
    string role?;
};

# Output only. Additional metadata about video media. This may not be available immediately upon upload.
public type File_videoMediaMetadata record {
    # Output only. The duration of the video in milliseconds.
    string durationMillis?;
    # Output only. The height of the video in pixels.
    int:Signed32 height?;
    # Output only. The width of the video in pixels.
    int:Signed32 width?;
};

# Deprecated: use the drive collection instead.
public type TeamDrive record {
    # An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on `drive.teamdrives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
    TeamDrive_backgroundImageFile backgroundImageFile?;
    # A short-lived link to this Team Drive's background image.
    string backgroundImageLink?;
    # Capabilities the current user has on this Team Drive.
    TeamDrive_capabilities capabilities?;
    # The color of this Team Drive as an RGB hex string. It can only be set on a `drive.teamdrives.update` request that does not set `themeId`.
    string colorRgb?;
    # The time at which the Team Drive was created (RFC 3339 date-time).
    string createdTime?;
    # The ID of this Team Drive which is also the ID of the top level folder of this Team Drive.
    string id?;
    # Identifies what kind of resource this is. Value: the fixed string `"drive#teamDrive"`.
    string kind?;
    # The name of this Team Drive.
    string name?;
    # The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.
    string orgUnitId?;
    # A set of restrictions that apply to this Team Drive or items inside this Team Drive.
    TeamDrive_restrictions restrictions?;
    # The ID of the theme from which the background image and color will be set. The set of possible `teamDriveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.teamdrives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.
    string themeId?;
};

# A reply to a comment on a file. Some resource methods (such as `replies.update`) require a `replyId`. Use the `replies.list` method to retrieve the ID for a reply.
public type Reply record {
    # The action the reply performed to the parent comment. Valid values are: * `resolve` * `reopen`
    string action?;
    # Information about a Drive user.
    User author?;
    # The plain text content of the reply. This field is used for setting the content, while `htmlContent` should be displayed. This is required on creates if no `action` is specified.
    string content?;
    # The time at which the reply was created (RFC 3339 date-time).
    string createdTime?;
    # Output only. Whether the reply has been deleted. A deleted reply has no content.
    boolean deleted?;
    # Output only. The content of the reply with HTML formatting.
    string htmlContent?;
    # Output only. The ID of the reply.
    string id?;
    # Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#reply"`.
    string kind?;
    # The last time the reply was modified (RFC 3339 date-time).
    string modifiedTime?;
};
